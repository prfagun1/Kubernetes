Pré-requisitos

Criar um balanceador para a porta 6443, criar uma entrada no DNS para este endereço e utilizar no comando para iniciar o cluster




Comandos para todos os servidores

mkdir -p /opt/suporte/scripts
setenforce 0
swapoff -a
sed -i '/swap/d' /etc/fstab
sed -i 's/ rd.lvm.lv=centos\/swap//g' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg

cat <<EOF> /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system

systemctl disable firewalld
systemctl stop firewalld


cat <<EOF> /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

yum clean all

yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y docker-ce docker-ce-cli containerd.io

yum install -y kubelet kubeadm kubectl docker.io --disableexcludes=kubernetes


mkdir /opt/docker -p
mkdir /etc/docker

cat <<EOF> /etc/docker/daemon.json
{
   "data-root": "/opt/docker",
   "exec-opts": ["native.cgroupdriver=systemd"],
   "log-driver": "json-file",
   "log-opts": {
     "max-size": "100m"
   },
   "storage-driver": "overlay2",
   "storage-opts": [
     "overlay2.override_kernel_check=true"
   ]
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

systemctl enable docker
systemctl start docker
systemctl enable kubelet 





Comandos para todos o primeiro nó Master

kubeadm init --pod-network-cidr=172.20.0.0/16 --service-cidr=172.21.0.0/16 --control-plane-endpoint "kubernetescpe.dominio.com.br" --upload-certs

*Instalar a rede somente após o segundo nó instalado

Iniciar rede

wget https://docs.projectcalico.org/manifests/calico.yaml
sed -i 's?192.168.0.0/16?172.20.0.0/16?g' /tmp/calico.yaml
kubectl apply -f calico.yaml


Instalar MetalLB

Editar o arquivo de configuração:

kubectl get configmap kube-proxy -n kube-system -o yaml | \
sed -e "s/strictARP: false/strictARP: true/" | \
kubectl apply -f - -n kube-system



kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"


Aplicar configurações:

cat <<EOF> /tmp/metallb-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 10.0.11.0-10.0.12.255
EOF


kubectl apply -f /tmp/metallb-configmap.yaml


Verificar se está rodando:
kubectl get pods -n metallb-system




Comandos para os outros nós Master

Para pegar a instrução a ser executada é necessário executar o comando no master 01.

	1) kubeadm token create --print-join-command
	2) kubeadm init phase upload-certs --upload-certs

Pegar o comando do item 2 e complementar com o certificado gerado do comando 2

Exemplo:
kubeadm join kubernetescpe.dominio.com.br:6443 --token 79i15y.top689befdeksvrv   --discovery-token-ca-cert-hash sha256:861a1b34fba5f904da51df4d1b3f94a75bdc22adbc8e3e7f9d413bb8b7b50faa --control-plane --certificate-key 6845d411705ee5561c54538186bbd77e7c2efad704acd81e8b570490c4871634


mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config





Comando para os Workers

Para pegar a instrução a ser executada é necessário executar o comando no master 01.

kubeadm token create --print-join-command

Executar o comando e aguardar.

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config





Teste do cluster criando um serviço e acessando ele

Criar POD

cat <<EOF> /tmp/nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
EOF



kubectl apply -f /tmp/nginx-deployment.yaml


Criar serviço

cat <<EOF> /tmp/nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    name: http
EOF

kubectl apply -f /tmp/nginx-service.yaml


Verificar o IP do serviço

kubectl get svc
